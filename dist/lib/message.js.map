{"version":3,"file":"message.js","sourceRoot":"","sources":["../../lib/message.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAMA;;;;;GAKG;AACH,MAAa,OAAO;IAClB,YAAa,OAA0B,EAAE,EAAiC;YAAjC,EAAE,aAAa,OAAkB,EAAb,MAAM,cAA1B,iBAA4B,CAAF;QACjE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,CAAC,CAAA;SAC9C;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAA;SACrC;QACD,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,aAAa,EAAE,CAAA;SAChC;IACH,CAAC;CACF;AAXD,0BAWC","sourcesContent":["import { IMessage } from '../interfaces'\n\n// Message class declaration implicitly implements interface\n// https://github.com/Microsoft/TypeScript/issues/340\nexport interface Message extends IMessage {}\n\n/**\n * Rocket.Chat message class.\n * Sets integration param to allow tracing source of automated sends.\n * @param content Accepts message text or a preformed message object\n * @todo Potential for SDK usage that isn't bots, bot prop should be optional?\n */\nexport class Message implements IMessage {\n  constructor (content: string | IMessage, { integrationId, ...others }: any) {\n    if (typeof content === 'string') {\n      Object.assign(this, { msg: content }, others)\n    } else {\n      Object.assign(this, content, others)\n    }\n    if (integrationId) {\n      this.bot = { i: integrationId }\n    }\n  }\n}\n"]}