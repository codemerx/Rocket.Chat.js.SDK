{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../lib/api/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger as Logger } from '../log'\n\nimport {\n\tILogger,\n\tILoginResultAPI,\n\tIAPIRequest,\n\tIMessage,\n\tICredentials\n} from '../../interfaces'\n\nimport { Message } from '../message'\n\nimport { EventEmitter } from 'tiny-events'\nimport * as settings from '../settings';\n\n/** Check for existing login */\n// export function loggedIn () {\n//   return (currentLogin !== null)\n// }\n\n/**\n\t* Prepend protocol (or put back if removed from env settings for driver)\n\t* Hard code endpoint prefix, because all syntax depends on this version\n\t*/\n// export const url = `${(host.indexOf('http') === -1) ? host.replace(/^(\\/\\/)?/, 'http://') : host}/api/v1/`\n\n/** Populate auth headers (from response data on login) */\n// export function setAuth (authData: {authToken: string, userId: string}) {\n//   client.defaults.headers.common['X-Auth-Token'] = authData.authToken\n//   client.defaults.headers.common['X-User-Id'] = authData.userId\n// }\n\n// /** Clear headers so they can't be used without logging in again */\n// export function clearHeaders () {\n//   delete client.defaults.headers.common['X-Auth-Token']\n//   delete client.defaults.headers.common['X-User-Id']\n// }\n\n// /**\n// \t* Login a user for further API calls\n// \t* Result should come back with a token, to authorise following requests.\n// \t* Use env default credentials, unless overridden by login arguments.\n// \t*/\n// export async function login (user: ICredentialsAPI = { username, password }) {\n//   this.logger.info(`[API] Logging in ${user.username}`)\n//   if (currentLogin !== null) {\n//     this.logger.debug(`[API] Already logged in`)\n//     if (currentLogin.username === user.username) return currentLogin.result\n//     else await logout()\n//   }\n//   const result = (await this.post('login', user, false) as ILoginResultAPI)\n//   if (result && result.data && result.data.authToken) {\n//     currentLogin = {\n//       result: result, // keep to return if login requested again for same user\n//       username: user.username, // keep to compare with following login attempt\n//       authToken: result.data.authToken,\n//       userId: result.data.userId\n//     }\n//     setAuth(currentLogin)\n//     this.logger.info(`[API] Logged in ID ${currentLogin.userId}`)\n//     return result\n//   } else {\n//     throw new Error(`[API] Login failed for ${user.username}`)\n//   }\n// }\n\n// /** Logout a user at end of API calls */\n// export function logout () {\n//   if (currentLogin === null) {\n//     this.logger.debug(`[API] Already logged out`)\n//     return Promise.resolve()\n//   }\n//   this.logger.info(`[API] Logging out ${ currentLogin.username }`)\n//   return this.get('logout', null, true).then(() => {\n//     clearHeaders()\n//     currentLogin = null\n//   })\n// }\n\nexport interface IClient {\n  headers: any\n  get (url: string, data: any, options?: any): Promise<any>\n  post (url: string, data: any, options?: any): Promise<any>\n  put (url: string, data: any, options?: any): Promise<any>\n  delete (url: string, data: any, options?: any): Promise<any>\n}\n\nclass Client implements IClient {\n  host: string\n\n  _headers: any = {}\n\n  constructor ({ host = 'http://localhost:3000' }: any) {\n    this.host = host\n  }\n\n  set headers (obj: any) {\n    this._headers = obj\n  }\n  get headers (): any {\n    return {\n      'Content-Type': 'application/json',\n      ...settings.customHeaders,\n      ...this._headers\n    }\n  }\n\n  getHeaders (options?: any) {\n    return options && options.customHeaders ?\n      options.customHeaders :\n      this.headers\n  }\n\n  getBody (data: any) {\n    return data instanceof FormData ?\n      data :\n      JSON.stringify(data)\n  }\n\n  getSignal (options?: any): AbortSignal {\n    return options && options.signal;\n  }\n\n  get (url: string, data: any, options?: any): Promise<any> {\n    return fetch(`${this.host}/api/v1/${encodeURI(url)}?${this.getParams(data)}`, {\n      method: 'GET',\n      headers: this.getHeaders(options),\n      signal: this.getSignal(options)\n    }).then(this.handle)\n  }\n  post (url: string, data: any, options?: any): Promise<any> {\n    return fetch(`${this.host}/api/v1/${encodeURI(url)}`, {\n      method: 'POST',\n      body: this.getBody(data),\n      headers: this.getHeaders(options),\n      signal: this.getSignal(options)\n    }).then(this.handle)\n  }\n  put (url: string, data: any, options?: any): Promise<any> {\n    return fetch(`${this.host}/api/v1/${encodeURI(url)}`, {\n      method: 'PUT',\n      body: this.getBody(data),\n      headers: this.getHeaders(options),\n      signal: this.getSignal(options)\n    }).then(this.handle)\n  }\n\n  delete (url: string, data?: any, options?: any): Promise<any> {\n    return fetch(`${this.host}/api/v1/${encodeURI(url)}`, {\n      method: 'DELETE',\n      body: this.getBody(data),\n      headers: this.getHeaders(options),\n      signal: this.getSignal(options)\n    }).then(this.handle)\n  }\n  private async handle (r: any) {\n    const { status } = r\n    const data = await r.json()\n\n    return { status, data }\n\n  }\n  private getParams (data: any) {\n    return Object.keys(data).map(function (k) {\n      return encodeURIComponent(k) + '=' + (typeof data[k] === 'object' ? encodeURIComponent(JSON.stringify(data[k])) : encodeURIComponent(data[k]))\n    }).join('&')\n  }\n}\n\nexport const regExpSuccess = /(?!([45][0-9][0-9]))\\d{3}/\n\n/**\n\t* @module API\n\t* Provides a base client for handling requests with generic Rocket.Chat's REST API\n\t*/\n\nexport default class Api extends EventEmitter {\n  userId: string = ''\n  logger: ILogger\n  client: IClient\n  currentLogin: {\n    username: string,\n    userId: string,\n    authToken: string,\n    result: ILoginResultAPI\n  } | null = null\n  controller: AbortController\n\n  constructor ({ client, host, logger = Logger }: any) {\n    super()\n    this.client = client || new Client({ host } as any)\n    this.logger = Logger\n    this.controller = new AbortController();\n  }\n\n  get username () {\n    return this.currentLogin && this.currentLogin.username\n  }\n\n  loggedIn () {\n    return Object.keys(this.currentLogin || {} as any).every((e: any) => e)\n  }\n/**\n\t* Do a request to an API endpoint.\n\t* If it needs a token, login first (with defaults) to set auth headers.\n\t* @param method   Request method GET | POST | PUT | DEL\n\t* @param endpoint The API endpoint (including version) e.g. `chat.update`\n\t* @param data     Payload for POST request to endpoint\n\t* @param auth     Require auth headers for endpoint, default true\n\t* @param ignore   Allows certain matching error messages to not count as errors\n\t*/\n  request = async (\n\t\tmethod: 'POST' | 'GET' | 'PUT' | 'DELETE',\n\t\tendpoint: string,\n\t\tdata: any = {},\n\t\tauth: boolean = true,\n    ignore?: RegExp,\n    options?: any\n\t) => {\n    this.logger && this.logger.debug(`[API] ${ method } ${ endpoint }: ${ JSON.stringify(data) }`)\n    try {\n      if (auth && !this.loggedIn()) {\n        throw new Error('')\n      }\n\n      const { signal } = this.controller;\n      options = { ...options, signal };\n\n      let result\n      switch (method) {\n        case 'GET': result = await this.client.get(endpoint, data, options); break\n        case 'PUT': result = await this.client.put(endpoint, data, options); break\n        case 'DELETE': result = await this.client.delete(endpoint, data, options); break\n        default:\n        case 'POST': result = await this.client.post(endpoint, data, options); break\n      }\n      if (!result) throw new Error(`API ${ method } ${ endpoint } result undefined`)\n      if (!this.success(result, ignore)) throw result\n      this.logger && this.logger.debug(`[API] ${method} ${endpoint} result ${result.status}`)\n      const hasDataInsideResult = result && !result.data\n      return (method === 'DELETE') && hasDataInsideResult ? result : result.data\n    } catch (err) {\n      this.logger && this.logger.error(`[API] POST error(${ endpoint }): ${ JSON.stringify(err) }`)\n      throw err\n    }\n  }\n\t/** Do a POST request to an API endpoint. */\n  post: IAPIRequest = (endpoint, data, auth, ignore, options = {}) => this.request('POST', endpoint, data, auth, ignore, options)\n\n\t/** Do a GET request to an API endpoint. */\n  get: IAPIRequest = (endpoint, data, auth, ignore, options = {}) => this.request('GET', endpoint, data, auth, ignore, options)\n\n\t/** Do a PUT request to an API endpoint. */\n  put: IAPIRequest = (endpoint, data, auth, ignore, options = {}) => this.request('PUT', endpoint, data, auth, ignore, options)\n\n\t/** Do a DELETE request to an API endpoint. */\n  del: IAPIRequest = (endpoint, data, auth, ignore, options = {}) => this.request('DELETE', endpoint, data, auth, ignore, options)\n\n  /** Abort all current API requests. */\n  abort = (): void => this.controller.abort()\n\n\t/** Check result data for success, allowing override to ignore some errors */\n  success (result: any, ignore?: RegExp) {\n    return (\n\t\t\ttypeof result.status === 'undefined' ||\n\t\t\t(result.status && regExpSuccess.test(result.status)) ||\n\t\t\t(result.status && ignore && ignore.test(result.status))\n\t\t) ? true : false\n  }\n\n  async login (credentials: ICredentials, args?: any): Promise<any> {\n    const { data } = await this.post('login', { ...credentials, ...args })\n    this.userId = data.userId\n    this.currentLogin = {\n      username: data.me.username,\n      userId: data.userId,\n      authToken: data.authToken,\n      result: data\n    }\n    this.client.headers = {\n      'X-Auth-Token': data.authToken,\n      'X-User-Id': data.userId\n    }\n    return data\n  }\n  async logout () {\n    if (!this.currentLogin) {\n      return null\n    }\n    const result = await this.post('logout', {}, true)\n    this.userId = ''\n    this.currentLogin = null\n    return result\n  }\n/**\n * Structure message content, optionally addressing to room ID.\n * Accepts message text string or a structured message object.\n */\n  prepareMessage (\n\tcontent: string | IMessage,\n\trid?: string,\n\targs?: any\n): Message {\n    return new Message(content, { rid, roomId: rid, ...args })\n  }\n}\n"]}