{"version":3,"file":"Livechat.js","sourceRoot":"","sources":["../../../lib/clients/Livechat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\t* @module LivechatDriver\n\t* Provides high-level helpers for Livechat connection, method calls, subscriptions.\n\t*/\nimport LivechatRest from '../api/Livechat'\nimport { ISocket, Protocols, IDriver } from '../drivers'\nimport { logger as Logger } from '../log'\nimport {\n\tILogger,\n\tISocketOptions,\n\tICallback,\n\tISubscription\n} from '../../interfaces'\n\n// @ts-ignore\nexport default class LivechatClient extends LivechatRest implements ISocket {\n  livechatStream: string = 'stream-livechat-room'\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver> = Promise.resolve() as any\n  constructor ({ logger, allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super({ logger, ...config })\n    this.import(protocol, config)\n  }\n  import (protocol: Protocols, config: any) {\n    switch (protocol) {\n      // case Protocols.MQTT:\n      //   this.socket = import(/* webpackChunkName: 'mqtttest' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver({ logger: this.logger, ...config }))\n      //   break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddptest' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver({ logger: this.logger, ...config }))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n  async connect (options: ISocketOptions, callback?: ICallback): Promise <any> {\n    return (await this.socket as ISocket).connect(options).then(() => (this.setUpConnection()))\n  }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver) .subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyUser() }\n  async onMessage (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onMessage(cb) }\n  async onTyping (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onTyping(cb) }\n  async onAgentChange (rid: string, cb: ICallback) {\n    await this.subscribe(this.livechatStream, rid)\n    await this.onStreamData(this.livechatStream, ({ fields: { args: [{ type, data }] } }: any) => {\n      if (type === 'agentData') {\n        cb(data)\n      }\n    })\n  }\n  async onAgentStatusChange (rid: string, cb: ICallback) {\n    await this.subscribe(this.livechatStream, rid)\n    await this.onStreamData(this.livechatStream, ({ fields: { args: [{ type, status }] } }: any) => {\n      if (type === 'agentStatus') {\n        cb(status)\n      }\n    })\n  }\n\n  async onQueuePositionChange (rid: string, cb: ICallback) {\n    await this.subscribe(this.livechatStream, rid)\n    await this.onStreamData(this.livechatStream, ({ fields: { args: [{ type, data }] } }: any) => {\n      if (type === 'queueData') {\n        cb(data)\n      }\n    })\n  }\n\n  async notifyVisitorTyping (rid: string, username: string, typing: boolean) {\n    return (await this.socket as IDriver).notifyVisitorTyping(rid, username, typing, this.credentials.token)\n  }\n\n  async subscribe (topic: string, eventName: string) {\n    const { token } = this.credentials\n    return (await this.socket as ISocket).subscribe(topic, eventName, { token, visitorToken: token })\n  }\n\n  async subscribeRoom (rid: string) {\n    const { token } = this.credentials\n    return (await this.socket as IDriver).subscribeRoom(rid, { token, visitorToken: token })\n  }\n\n  async onStreamData (event: string, cb: ICallback): Promise<any> {\n    return (await this.socket as ISocket).onStreamData(event, cb)\n  }\n\n  async setUpConnection () {\n    const { token } = this.credentials\n    return (await this.socket as IDriver).methodCall('livechat:setUpConnection', { token })\n  }\n}\n"]}