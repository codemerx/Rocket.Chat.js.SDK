{"version":3,"file":"RocketChat.js","sourceRoot":"","sources":["../../../lib/api/RocketChat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\t* @module ApiRocketChat\n\t* Provides a client for handling requests with Rocket.Chat's REST API\n\t*/\n\nexport type RID = string\nimport {\n\tIUserAPI,\n\tIMessage,\n\tIChannelAPI,\n\tIGroupAPI,\n\tIMessageReceipt\n} from '../../interfaces'\n\nimport ApiBase from './api'\n\n/** Defaults for user queries */\nexport const userFields = { name: 1, username: 1, status: 1, type: 1 }\n\n/** Query helpers for user collection requests */\nexport default class ApiRocketChat extends ApiBase {\n\n  get users (): any {\n    const self = this\n    return {\n      all (fields: any = userFields) { return self.get('users.list', { fields }).then((r: any) => r.users) },\n      allNames () { return self.get('users.list', { fields: { 'username': 1 } }).then((r: any) => r.users.map((u: IUserAPI) => u.username)) },\n      allIDs () { return self.get('users.list', { fields: { '_id': 1 } }).then((r: any) => r.users.map((u: IUserAPI) => u._id)) },\n      online (fields: any = userFields) { return self.get('users.list', { fields, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users) },\n      onlineNames () { return self.get('users.list', { fields: { 'username': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users.map((u: IUserAPI) => u.username)) },\n      onlineIds () { return self.get('users.list', { fields: { '_id': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users.map((u: IUserAPI) => u._id)) },\n      async info (username: string): Promise<IUserAPI> { return (await self.get('users.info', { username }, true)).user }\n    }\n  }\n\n  get rooms (): any {\n    const self = this\n    return {\n      info ({ rid }: any) { return self.get('rooms.info', { rid }, true) }\n    }\n  }\n\n\t// editMessage(message: IMessage) chat.update\n  joinRoom ({ rid }: any) { return this.post('channels.join', { roomId: rid }, true) }\n\n  async info () { return (await this.get('info', {}, true)).info }\n\t/**\n\t * Send a prepared message object (with pre-defined room ID).\n\t * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n\t */\n  async sendMessage (message: IMessage | string, rid: string): Promise<IMessageReceipt> { return (await this.post('chat.sendMessage', { message: this.prepareMessage(message, rid) }, true)).message }\n  getRoomIdByNameOrId (name: string): Promise<RID> { return this.get('chat.getRoomIdByNameOrId', { name }, true) }\n  getRoomNameById (rid: RID): Promise<string> { return this.getRoomName(rid) }\n  async getRoomName (rid: string): Promise<string> {\n    const room = await this.get('chat.getRoomNameById', { rid }, true)\n    return room.name\n  }\n  getRoomId (name: string) { return this.get('chat.find', { name }, true) }\n  async createDirectMessage (username: string) { return (await this.post('im.create', { username }, true)).room }\n\n/**\n * Edit an existing message, replacing any attributes with those provided.\n * The given message object should have the ID of an existing message.\n */\n  editMessage (message: IMessage): Promise<IMessageReceipt> {\n    return this.post('chat.update', { roomId: message.rid, msgId: message._id, text: message.msg })\n  }\n\t/**\n\t * Send a reaction to an existing message. Simple proxy for method call.\n\t * @param emoji     Accepts string like `:thumbsup:` to add üëç reaction\n\t * @param messageId ID for a previously sent message\n\t */\n  setReaction (emoji: string, messageId: string) { return this.post('chat.react', { emoji, messageId }, true) }\n\n\t// TODO fix this methods\n\n  async loadHistory (rid: string, lastUpdate: Date): Promise<{\n    updated: IMessage[],\n    deleted: IMessage[]\n  }> {\n    return (await this.get('chat.syncMessages', { roomId: rid, lastUpdate: lastUpdate.toISOString() }, true)).result\n  }\n\t/** Exit a room the bot has joined */\n  leaveRoom (rid: string): Promise<RID> {\n    return this.post('rooms.leave', { rid }).then(() => rid)\n  }\n\n\t/** Get information about a public group */\n  async channelInfo (query: { roomName?: string, roomId?: string }) {\n    return (await this.get('channels.info', query, true)).channel as Promise<IChannelAPI>\n  }\n\n\t/** Get information about a private group */\n  async privateInfo (query: { roomName?: string, roomId?: string }) {\n    return (await this.get('groups.info', query, true)).group as Promise<IGroupAPI>\n  }\n}\n"]}