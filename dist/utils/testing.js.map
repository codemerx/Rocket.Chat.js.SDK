{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../utils/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import ApiBase from '../lib/api/api'\nimport { apiUser, botUser, mockUser } from './config'\nimport {\n  IMessageAPI,\n  IMessageUpdateAPI,\n  IMessageResultAPI,\n  INewUserAPI,\n  IRoomResultAPI,\n  IChannelResultAPI,\n  IGroupResultAPI,\n  IHistoryAPI,\n  IMessageReceipt,\n\tIUserAPI\n} from '../interfaces'\n\nconst api = new ApiBase({})\n\n/** Define common attributes for DRY tests */\nexport const testChannelName = 'tests'\nexport const testPrivateName = 'p-tests'\n\n/** Get information about a user */\nexport async function userInfo (username: string) {\n  return (await api.get('users.info', { username }, true) as IUserAPI)\n}\n\n/** Create a user and catch the error if they exist already */\nexport async function createUser (user: INewUserAPI) {\n  return (await api.post('users.create', user, true, /already in use/i)) as IUserAPI\n}\n\n/** Get information about a channel */\nexport async function channelInfo (query: { roomName?: string, roomId?: string }) {\n  return api.get('channels.info', query, true) as Promise<IChannelResultAPI>\n}\n\n/** Get information about a private group */\nexport async function privateInfo (query: { roomName?: string, roomId?: string }) {\n  return api.get('groups.info', query, true) as Promise<IGroupResultAPI>\n}\n\n/** Get the last messages sent to a channel (in last 10 minutes) */\nexport async function lastMessages (roomId: string, count: number = 1) {\n  const now = new Date()\n  const latest = now.toISOString()\n  const oldest = new Date(now.setMinutes(now.getMinutes() - 10)).toISOString()\n  const history = (await api.get('channels.history', { roomId, latest, oldest, count }) as IHistoryAPI)\n  return history.messages\n}\n\n/** Create a room for tests and catch the error if it exists already */\nexport async function createChannel (\n  name: string,\n  members: string[] = [],\n  readOnly: boolean = false\n) {\n  return (await api.post('channels.create', { name, members, readOnly }, true) as IChannelResultAPI)\n}\n\n/** Create a private group / room and catch if exists already */\nexport async function createPrivate (\n  name: string,\n  members: string[] = [],\n  readOnly: boolean = false\n) {\n  return (api.post('groups.create', { name, members, readOnly }, true))\n}\n\n/** Send message from mock user to channel for tests to listen and respond */\n/** @todo Sometimes the post request completes before the change event emits\n *        the message to the streamer. That's why the interval is used for proof\n *        of receipt. It would be better for the endpoint to not resolve until\n *        server side handling is complete. Would require PR to core.\n */\nexport async function sendFromUser (payload: any): Promise<IMessageResultAPI> {\n  const user = await api.login({ username: mockUser.username, password: mockUser.password })\n  const endpoint = (payload.roomId && payload.roomId.indexOf(user.userId) !== -1)\n    ? 'dm.history'\n    : 'channels.history'\n  const roomId = (payload.roomId)\n    ? payload.roomId\n    : (await channelInfo({ roomName: testChannelName })).channel._id\n  const messageDefaults: IMessageAPI = { roomId }\n  const data: IMessageAPI = Object.assign({}, messageDefaults, payload)\n  const oldest = new Date().toISOString()\n  const result = (await api.post('chat.postMessage', data, true) as IMessageResultAPI)\n  const proof = new Promise((resolve, reject) => {\n    let looked = 0\n    const look = setInterval(async () => {\n      const { messages } = (await api.get(endpoint, { roomId, oldest }) as IHistoryAPI)\n      const found = messages.some((message: IMessageReceipt) => {\n        return result.message._id === message._id\n      })\n      if (found || looked > 10) {\n        clearInterval(look)\n        if (found) resolve()\n        else reject('API send from user, proof of receipt timeout')\n      }\n      looked++\n    }, 100)\n  })\n  await proof\n  return result\n}\n\n/** Leave user from room, to generate `ul` message (test channel by default) */\nexport async function leaveUser (room: { id?: string, name?: string } = {}) {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  if (!room.id && !room.name) room.name = testChannelName\n  const roomId = (room.id)\n    ? room.id\n    : (await channelInfo({ roomName: room.name })).channel._id\n  return (await api.post('channels.leave', { roomId }) as Boolean)\n}\n\n/** Invite user to room, to generate `au` message (test channel by default) */\nexport async function inviteUser (room: { id?: string, name?: string } = {}) {\n  let mockInfo = await userInfo(mockUser.username)\n  await api.login({ username: apiUser.username, password: apiUser.password })\n  if (!room.id && !room.name) room.name = testChannelName\n  const roomId = (room.id)\n    ? room.id\n    : (await channelInfo({ roomName: room.name })).channel._id\n  return (await api.post('channels.invite', { userId: mockInfo._id, roomId }) as boolean)\n}\n\n/** @todo : Join user into room (enter) to generate `uj` message type. */\n\n/** Update message sent from mock user */\nexport async function updateFromUser (payload: IMessageUpdateAPI) {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  return (await api.post('chat.update', payload, true) as IMessageResultAPI)\n}\n\n/** Create a direct message session with the mock user */\nexport async function setupDirectFromUser () {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  return (await api.post('im.create', { username: botUser.username }, true) as IRoomResultAPI)\n}\n\n/** Initialise testing instance with the required users for SDK/bot tests */\nexport async function setup () {\n  console.log('\\nPreparing instance for tests...')\n  try {\n\t\t// Verify API user can login\n    await api.login({ password: apiUser.password, username: apiUser.username })\n    console.log(`API user (${apiUser.username}) logged in`)\n  } catch (error) {\n    console.log(error, apiUser)\n    throw new Error(`API user (${apiUser.username}) could not login`)\n  }\n\n  try {\n    const botInfo = await userInfo(botUser.username)\n    console.log(`API user (${botInfo.username}) exists`)\n  } catch (error) {\n    console.log(`Bot user (${botUser.username}) not found`)\n    const botInfo = await createUser(botUser)\n    // if (!botInfo.success) {\n    //   throw new Error(`Bot user (${botUser.username}) could not be created`)\n    // }\n    console.log(`Bot user (${botInfo.username}) created`)\n  }\n  try {\n\t\t// Verify or create mock user for talking to bot\n    let mockInfo = await userInfo(mockUser.username)\n    console.log(`Mock user (${mockInfo.username}) exists`)\n  } catch (error) {\n    console.log(`Mock user (${mockUser.username}) not found`)\n    const mockInfo = await createUser(mockUser)\n    // if (!mockInfo || mockInfo.success) {\n    //   throw new Error(`Mock user (${mockUser.username}) could not be created`)\n    // }\n    console.log(`Mock user (${mockInfo.username}) created`)\n  }\n  try {\n\t\t// Verify or create user for bot\n    // Verify or create channel for tests\n    await channelInfo({ roomName: testChannelName })\n    console.log(`Test channel (${testChannelName}) exists`)\n  } catch (e) {\n    console.log(`Test channel (${testChannelName}) not found`)\n    await createChannel(testChannelName, [\n      apiUser.username, botUser.username, mockUser.username\n    ])\n    // if (!testChannelInfo.success) {\n    //   throw new Error(`Test channel (${testChannelName}) could not be created`)\n    // }\n    console.log(`Test channel (${testChannelName}) created`)\n  }\n  try {\n    // Verify or create private room for tests\n    await privateInfo({ roomName: testPrivateName })\n    console.log(`Test private room (${testPrivateName}) exists`)\n  } catch (error) {\n    const testPrivateInfo = await createPrivate(testPrivateName, [\n      apiUser.username, botUser.username, mockUser.username\n    ])\n    console.log(`Test private room (${testPrivateInfo.name}) created`)\n  }\n  await api.logout()\n}\n"]}