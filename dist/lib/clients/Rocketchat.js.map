{"version":3,"file":"Rocketchat.js","sourceRoot":"","sources":["../../../lib/clients/Rocketchat.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISocket, IDriver, Protocols } from '../drivers'\nimport ClientRest from '../api/RocketChat'\nimport { ILogger, ISocketOptions, ICallback, ISubscription, ICredentials } from '../../interfaces'\nimport { logger as Logger } from '../log'\nexport default class RocketChatClient extends ClientRest implements ISocket {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver>\n  config: any\n\n  constructor ({ logger, allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super({ ...config, logger })\n    this.logger = logger\n    switch (protocol) {\n      // case Protocols.MQTT:\n      //   this.socket = import(/* webpackChunkName: 'mqtt' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver({ ...config, logger }))\n      //   break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddp' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver({ ...config, logger }))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n\n  async resume ({ token }: { token: string }) {\n    return (await this.socket as IDriver).login({ token } as any, {})\n  }\n\n  async login (credentials: ICredentials) {\n    await super.login(credentials)\n    return this.currentLogin && this.resume({ token: this.currentLogin.authToken })\n  }\n\n  async connect (options: ISocketOptions): Promise<any> { return (await this.socket as ISocket).connect(options) }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async checkAndReopen (): Promise<any> { return (await this.socket as ISocket).checkAndReopen() }\n  async onStreamData (event: string, cb: ICallback): Promise<any> { return (await this.socket as ISocket).onStreamData(event, cb) }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as ISocket).subscribe(topic, ...args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket as IDriver).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver).subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyUser() }\n  get url () {\n    return this.socket.then((socket) => (socket as IDriver).config.host)\n  }\n  async onMessage (cb: ICallback): Promise<any> {\n    return (await this.socket as IDriver).onMessage(cb)\n  }\n  async methodCall (method: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as IDriver).methodCall(method, ...args) }\n\n}\n"]}