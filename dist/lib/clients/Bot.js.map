{"version":3,"file":"Bot.js","sourceRoot":"","sources":["../../../lib/clients/Bot.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../log'\nimport Rocketchat from './Rocketchat'\nimport mem from 'mem'\nimport {\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tISubscription,\n\tIMessageReceipt\n} from '../../interfaces'\nimport { RID } from '../api/RocketChat'\n\nconst MY_MESSAGES = '__my_messages__'\nconst TOPIC_MESSAGES = 'stream-room-messages'\n\nexport default class BotClient extends Rocketchat {\n  integrationId: string\n  lastReadTime: Date = new Date(-8640000000000000)\n  joinedIds: string[] = []\n  messages: ISubscription | null = null\n\n  constructor ({ allPublic = false, integrationId, cachedMethods = ['channelInfo','privateInfo','getRoomIdByNameOrId', 'getRoomId', 'getRoomName','getRoomNameById','getDirectMessageRoomId' ], ...config }: any) {\n    super({ ...config, allPublic })\n    this.integrationId = integrationId\n\n    cachedMethods.forEach((name: string) => {\n      if ((this as any)[name]) {\n        (this as any)[name] = mem((this as any)[name].bind(this), { maxAge: 60 * 60 * 1000 }).bind(this)\n      }\n    })\n  }\n\t/**\n\t * Initialise socket instance with given options or defaults.\n\t * Proxies the DDP module socket connection. Resolves with socket when open.\n\t * Accepts callback following error-first-pattern.\n\t * Error returned or promise rejected on timeout.\n\t * @example <caption>Use with callback</caption>\n\t *  import driver from '@rocket.chat/sdk/bot'\n\t *  driver.connect({}, (err) => {\n\t *    if (err) throw err\n\t *    else console.log('connected')\n\t *  })\n\t * @example <caption>Using promise</caption>\n\t *  import driver from '@rocket.chat/sdk/bot'\n\t *  driver.connect()\n\t *    .then(() => console.log('connected'))\n\t *    .catch((err) => console.error(err))\n\t */\n  async connect (options: ISocketOptions, callback?: ICallback): Promise<any> {\n    try {\n      const result = await super.connect(options)\n      if (callback) {\n        callback(null, (await this.socket))\n      }\n      return result\n\n    } catch (error) {\n      if (callback) {\n        callback(error, this)\n      }\n      return Promise.reject(error)\n    }\n  }\n  async unsubscribeAll () {\n    delete this.messages\n    return super.unsubscribeAll()\n  }\n/** Begin subscription to user's \"global\" message stream. Will only allow one. */\n  async subscribeToMessages () {\n    if (!this.messages) {\n      this.messages = await this.subscribe(TOPIC_MESSAGES, MY_MESSAGES)\n    }\n    return this.messages\n  }\n/**\n * Add callback for changes in the message stream, subscribing if not already.\n * This can be called directly for custom extensions, but for most usage (e.g.\n * for bots) the respondToMessages is more useful to only receive messages\n * matching configuration.\n *\n * @param callback Function called with every change in subscriptions.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed message\n *  - Third argument is additional attributes, such as `roomType`\n */\n  async reactToMessages (callback: IMessageCallback, debug?: string) {\n    const handler = (e: ISubscriptionEvent) => {\n\n      try {\n        const message: IMessage = e.fields.args[0]\n\n        if (!message || !message._id) {\n          callback(new Error('Message handler fired on event without message or meta data'))\n        } else {\n\n          callback(null, message, {} as any)\n        }\n      } catch (err) {\n        this.logger.error(`[driver] Message handler err: ${err.message}`)\n        callback(err)\n      }\n    }\n    this.messages = await this.subscribeToMessages()\n    // @ts-ignore\n    this.messages.onEvent(handler)\n    // this.logger.info(`[driver] Added event handler for ${this.messages.name} subscription`)\n  }\n/**\n * Applies `reactToMessages` with some filtering of messages based on config.\n * If no rooms are joined at this point, it will attempt to join now based on\n * environment config, otherwise it might not receive any messages. It doesn't\n * matter that this happens asynchronously because joined rooms can change after\n * the subscription is set up.\n *\n * @param callback Function called after filters run on subscription events.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n * @param options Sets filters for different event/message types.\n */\n  async respondToMessages (callback: IMessageCallback, options: IRespondOptions = {}) {\n    const config = { ...this.config, ...options }\n\n\t\t// Join configured rooms if they haven't been already, unless listening to all\n\t\t// public rooms, in which case it doesn't matter\n    if (!config.allPublic && this.joinedIds.length === 0 && config.rooms && config.rooms.length > 0) {\n      try {\n        await this.joinRooms(config.rooms)\n      } catch (err) {\n        this.logger.error(`[driver] Failed to join configured rooms (${config.rooms.join(', ')}): ${err.message}`)\n      }\n    }\n    return this.reactToMessages(async (err, message, meta) => {\n      if (err) {\n        logger.error(`[driver] Unable to receive: ${err.message}`)\n        return callback(err) // bubble errors back to adapter\n      }\n      if (typeof message === 'undefined' /*|| typeof meta === 'undefined'*/) {\n        logger.error(`[driver] Message or meta undefined`)\n        return callback(err)\n      }\n\n\t\t\t// Ignore bot's own messages\n      if (message.u && message.u._id === this.userId) return\n\n\t\t\t// Ignore DMs unless configured not to\n      try {\n\n        const room = await this.rooms.info({ rid: message.rid })\n\n        const isDM = room.t === 'd'\n        if (isDM && !config.dm) return\n\n\t\t\t\t// Ignore Livechat unless configured not to\n        const isLC = room.t === 'l'\n\n        if (isLC && !config.livechat) return\n      } catch (error) {\n        console.log(error)\n      }\n\n\t\t\t// Ignore messages in un-joined public rooms unless configured not to\n      // if (!config.allPublic && !isDM && !meta.roomParticipant) return\n\n\t\t\t// Set current time for comparison to incoming\n      let currentReadTime = (message.ts) ? new Date(message.ts.$date) : new Date()\n\n\t\t\t// Ignore edited messages if configured to\n      if (!config.edited && message.editedAt) return\n\n\t\t\t// Ignore messages in stream that aren't new\n\n      if (currentReadTime < this.lastReadTime) return\n\t\t\t// At this point, message has passed checks and can be responded to\n      // const username = (message.u) ? message.u.username : 'unknown'\n      // this.logger.info(`[driver] Message ${message._id} from ${username}`)\n      this.lastReadTime = currentReadTime\n\n      callback(null, message, meta)\n    })\n  }\n\n\t/** Get ID for a room by name (or ID). */\n  getRoomId (name: string): Promise < RID > {\n    return this.getRoomIdByNameOrId(name)\n  }\n\n\t/** Join the bot into a room by its name or ID */\n  async joinRoom ({ rid }: any): Promise < RID > {\n    const roomId = await this.getRoomId(rid)\n    const joinedIndex = this.joinedIds.indexOf(rid)\n    if (joinedIndex !== -1) {\n      logger.error(`[driver] Join room failed, already joined`)\n      throw new Error(`[driver] Join room failed, already joined`)\n    }\n    await super.joinRoom({ rid: roomId })\n    this.joinedIds.push(roomId)\n    return roomId\n  }\n\n\t/** Exit a room the bot has joined */\n  async leaveRoom (room: string): Promise < RID > {\n    let roomId = await this.getRoomId(room)\n    let joinedIndex = this.joinedIds.indexOf(room)\n    if (joinedIndex === -1) {\n      this.logger.error(`[driver] Leave room failed, bot has not joined ${room}`)\n      throw new Error(`[driver] Leave room failed, bot has not joined ${room}`)\n    }\n    await this.leaveRoom(roomId)\n    delete this.joinedIds[joinedIndex]\n    return roomId\n  }\n\n\t/** Join a set of rooms by array of names or IDs */\n  joinRooms (rooms: string[]): Promise < RID[] > {\n    return Promise.all(rooms.map((rid) => this.joinRoom({ rid })))\n  }\n\t/**\n\t * Prepare and send string/s to specified room ID.\n\t * @param content Accepts message text string or array of strings.\n\t * @param roomId  ID of the target room to use in send.\n\t * @todo Returning one or many gets complicated with type checking not allowing\n\t *       use of a property because result may be array, when you know it's not.\n\t *       Solution would probably be to always return an array, even for single\n\t *       send. This would be a breaking change, should hold until major version.\n\t */\n  sendToRoomId (content: IMessage | string | string[], roomId: string): Promise<IMessageReceipt[] | IMessageReceipt > {\n    if (Array.isArray(content)) {\n      return Promise.all(content.map((text) => {\n        return this.sendMessage(text, roomId)\n      }))\n    }\n    return this.sendMessage(content, roomId)\n  }\n\t/**\n\t * Prepare and send string/s to specified room name (or ID).\n\t * @param content Accepts message text string or array of strings.\n\t * @param room    A name (or ID) to resolve as ID to use in send.\n\t */\n  sendToRoom (content: IMessage | string | string[], room: string): Promise<IMessageReceipt[] | IMessageReceipt > {\n    return this.getRoomId(room)\n\t\t.then((roomId) => this.sendToRoomId(content, roomId))\n  }\n\n\t/**\n\t * Prepare and send string/s to a user in a DM.\n\t * @param content   Accepts message text string or array of strings.\n\t * @param username  Name to create (or get) DM for room ID to use in send.\n\t */\n  sendDirectToUser (content: IMessage | string | string[], username: string): Promise<IMessageReceipt[] | IMessageReceipt > {\n    return this.getDirectMessageRoomId(username)\n\t\t.then((rid) => this.sendToRoomId(content, rid))\n  }\n\t/**\n\t * Get ID for a DM room by its recipient's name.\n\t * Will create a DM (with the bot) if it doesn't exist already.\n\t * @todo test why create resolves with object instead of simply ID\n\t */\n  getDirectMessageRoomId (username: string): Promise < RID > {\n    return this.createDirectMessage(username).then((DM: any) => {\n      return DM._id\n    })\n  }\n}\n"]}