{"version":3,"file":"ddp.js","sourceRoot":"","sources":["../../../lib/drivers/ddp.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module DDPDriver\n * Handles low-level websocket ddp connections and event subscriptions\n */\n\nimport WebSocket from 'universal-websocket-client'\nimport { EventEmitter } from 'tiny-events'\n\nimport { logger as Logger } from '../log'\nimport { ISocket, IDriver } from './index'\nimport * as settings from '../settings';\n\nEventEmitter.prototype.removeAllListeners = function (event?: string | any): any {\n  if (event) {\n    this._listeners[event] = []\n  } else {\n    this._listeners = {}\n  }\n  return [] as any\n}\n\nimport {\n  ISocketOptions,\n  ISocketMessageHandler,\n  ISubscription,\n  ICredentials,\n  ILoginResult,\n  ICredentialsPass,\n  isLoginPass,\n  ICredentialsOAuth,\n  isLoginOAuth,\n  ICredentialsAuthenticated,\n  isLoginAuthenticated,\n  isLoginResult,\n  ISocketMessageCallback,\n\tICallback,\n\tILogger\n} from '../../interfaces'\n\nimport { hostToWS } from '../util'\nimport { sha256 } from 'js-sha256'\n\nconst userDisconnectCloseCode = 4000;\nconst reopenCloseCode = 4001;\n\n/** Websocket handler class, manages connections and subscriptions by DDP */\nexport class Socket extends EventEmitter {\n  sent = 0\n  host: string\n  lastPing = Date.now()\n  subscriptions: { [id: string]: ISubscription } = {}\n  handlers: ISocketMessageHandler[] = []\n  config: ISocketOptions | any\n  openTimeout?: NodeJS.Timer | number\n  reopenInterval?: NodeJS.Timer | number\n  pingTimeout?: NodeJS.Timer | number\n  connection?: WebSocket\n  session?: string\n  logger: ILogger\n\n  /** Create a websocket handler */\n  constructor (\n    options?: ISocketOptions | any,\n    public resume: ILoginResult | null = null\n  ) {\n    super()\n    this.logger = options.logger || Logger\n    this.config = {\n      host: options.host || 'http://localhost:3000',\n      useSsl: options.useSsl || false,\n      reopen: options.reopen || 10000,\n      ping: options.timeout || 30000\n    }\n\n    this.host = `${hostToWS(this.config.host, this.config.useSsl)}/websocket`\n\n    this.on('ping', () => {\n      this.lastPing = Date.now()\n      this.send({ msg: 'pong' }).then(this.logger.debug, this.logger.error)\n    })\n\n    this.on('result', (data: any) => this.emit(data.id, { id: data.id, result: data.result, error: data.error }))\n    this.on('ready', (data: any) => this.emit(data.subs[0], data))\n  }\n\n  /**\n   * Open websocket connection, with optional retry interval.\n   * Stores connection, setting up handlers for open/close/message events.\n   * Resumes login if given token.\n   */\n  open = (ms: number = this.config.reopen) => {\n    return new Promise(async (resolve, reject) => {\n      let connection: WebSocket\n\n      if (this.connection) {\n        this.connection.close(reopenCloseCode)\n      }\n\n      this.reopenInterval && clearInterval(this.reopenInterval as any)\n      this.reopenInterval = setInterval(() => {\n        return !this.alive() && this.reopen()\n      }, ms)\n\n      try {\n        connection = new WebSocket(this.host, null, { headers: settings.customHeaders })\n        connection.onerror = reject\n      } catch (err) {\n        this.logger.error(err)\n        return reject(err)\n      }\n      this.connection = connection\n      this.connection.onmessage = this.onMessage.bind(this)\n      this.connection.onclose = this.onClose.bind(this)\n      this.connection.onopen = this.onOpen.bind(this, resolve)\n      this.emit('connecting')\n    })\n  }\n\n  /** Send handshake message to confirm connection, start pinging. */\n  onOpen = async (callback: Function) => {\n    this.lastPing = Date.now()\n\n    const connected = await this.send({\n      msg: 'connect',\n      version: '1',\n      support: ['1', 'pre2', 'pre1']\n    })\n    this.session = connected.session\n    this.ping().catch((err) => this.logger.error(`[ddp] Unable to ping server: ${err.message}`))\n    this.emit('open')\n    if (this.resume) await this.login(this.resume)\n    return callback(this.connection)\n  }\n\n  /** Emit close event so it can be used for promise resolve in close() */\n  onClose = (e: any) => {\n    this.emit('close', e)\n    try {\n      if (e?.code !== userDisconnectCloseCode) {\n        this.reopen()\n      }\n      this.logger.info(`[ddp] Close (${e?.code})`)\n    } catch (error) {\n      this.logger.error(error)\n    }\n  }\n\n  /**\n   * Find and call matching handlers for incoming message data.\n   * Handlers match on collection, id and/or msg attribute in that order.\n   * Any matched handlers are removed once called.\n   * All collection events are emitted with their `msg` as the event name.\n   */\n  onMessage = (e: any) => {\n    this.lastPing = Date.now()\n    const data = (e.data) ? JSON.parse(e.data) : undefined\n  \n    this.logger.debug(data) // 👈  very useful for debugging missing responses\n    if (!data) return this.logger.error(`[ddp] JSON parse error: ${e.message}`)\n    this.logger.debug(`[ddp] messages received: ${e.data}`)\n    if (data.collection) this.emit(data.collection, data)\n    if (data.msg) this.emit(data.msg, data)\n    if (data.id) this.emit(data.id, data)\n  }\n\n  /** Disconnect the DDP from server and clear all subscriptions. */\n  close = async () => {\n    this.unsubscribeAll().catch(e => this.logger.debug(e))\n\n    this.reopenInterval && clearInterval(this.reopenInterval as any)\n    this.openTimeout && clearTimeout(this.openTimeout as any)\n    this.pingTimeout && clearTimeout(this.pingTimeout as any)\n\n    if (this.connected) {\n      await new Promise((resolve) => {\n        if (this.connection) {\n          this.once('close', resolve)\n          this.connection.close(userDisconnectCloseCode)\n        }\n      })\n      .catch(this.logger.error)\n    }\n\n    return Promise.resolve()\n  }\n\n  checkAndReopen = () => !this.connected && this.reopen()\n\n  /** Clear connection and try to connect again. */\n  reopen = async () => {\n    if (this.openTimeout) return\n    this.openTimeout = setTimeout(() => { delete this.openTimeout }, this.config.reopen);\n\n    await this.open()\n      .catch((err) => {\n        this.logger.error(`[ddp] Reopen error: ${err.message}`);\n        this.reopen();\n      })\n  }\n\n  /** Check if websocket connected and ready. */\n  get connected () {\n    return !!(\n      this.connection &&\n      this.connection.readyState === 1 &&\n      this.alive()\n    )\n  }\n\n  /** Check if connected and logged in */\n  get loggedIn () {\n    return (this.connected && !!this.resume)\n  }\n\n  /**\n   * Send an object to the server via Socket. Adds handler to collection to\n   * allow awaiting response matching an expected object. Most responses are\n   * identified by their message event name and the ID they were sent with, but\n   * some responses don't return the ID fallback to just matching on event name.\n   * Data often includes an error attribute if something went wrong, but certain\n   * types of calls send back a different `msg` value instead, e.g. `nosub`.\n   * @param obj       Object to be sent\n   * @param msg       The `data.msg` value to wait for in response\n   * @param errorMsg  An alternate `data.msg` value indicating an error response\n   */\n  send = async (obj: any): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      if (!this.connection) throw new Error('[ddp] sending without open connection')\n      if (!this.connected) await new Promise(resolve => this.on('open', resolve))\n\n      const id = obj.id || `ddp-${ this.sent }`\n      this.sent += 1\n      const data = { ...obj, ...(/connect|ping|pong/.test(obj.msg) ? {} : { id }) }\n      const stringdata = JSON.stringify(data)\n      this.logger.debug(`[ddp] sending message: ${stringdata}`)\n\n      if (/^sub$/.test(obj.msg)) {\n        const { name, params } = obj;\n        this.subscriptions[id] = { id, name, params, unsubscribe: this.unsubscribe.bind(this, id) };\n      }\n\n      try {\n        this.connection.send(stringdata)\n      } catch {\n        this.logger.error('[ddp] send without open connection');\n      }\n\n      this.once('disconnected', reject)\n      const listener = (data.msg === 'ping' && 'pong') || (data.msg === 'connect' && 'connected') || data.id\n      if (!listener) {\n        return resolve()\n      }\n      this.once(listener, (result: any) => {\n        this.off('disconnect', reject)\n        return (result.error ? reject(result.error) : resolve({ ...(/connect|ping|pong/.test(obj.msg) ? {} : { id }) , ...result }))\n      })\n    })\n  }\n\n  /** Send ping, record time, re-open if nothing comes back, repeat */\n  ping = async () => {\n    this.pingTimeout && clearTimeout(this.pingTimeout as any)\n    this.pingTimeout = setTimeout(() => {\n      this.send({ msg: 'ping' })\n        .then(() => this.ping())\n        .catch(() => this.reopen())\n    }, this.config.ping)\n  }\n\n  /** Check if ping-pong to server is within tolerance of 1 missed ping */\n  alive = () => {\n    if (!this.lastPing) return false\n    return (Date.now() - this.lastPing <= this.config.ping * 2)\n  }\n\n  /**\n   * Calls a method on the server and returns a promise resolved\n   * with the result of the method.\n   * @param method    The name of the method to be called\n   * @param params    An array with the parameters to be sent\n   */\n  call = async (method: string, ...params: any[]) => {\n    const response = await this.send({ msg: 'method', method, params })\n      .catch((err) => {\n        this.logger.error(`[ddp] Call error: ${err.message}`)\n        throw err\n      })\n    return (response.result) ? response.result : response\n  }\n\n  /**\n   * Login to server and resubscribe to all subs, resolve with user information.\n   * @param credentials User credentials (username/password, oauth or token)\n   */\n  login = async (credentials: any) => {\n    const params = this.loginParams(credentials)\n    this.resume = (await this.call('login', params) as ILoginResult)\n    await this.subscribeAll()\n    this.emit('login', this.resume)\n    return this.resume\n  }\n\n  /** Take variety of login credentials object types for accepted params */\n  loginParams = (\n    credentials:\n      ICredentialsPass |\n      ICredentialsOAuth |\n      ICredentialsAuthenticated |\n      ILoginResult |\n      ICredentials\n  ) => {\n    if (\n      isLoginPass(credentials) ||\n      isLoginOAuth(credentials) ||\n      isLoginAuthenticated(credentials)\n    ) {\n      return credentials\n    }\n    if (isLoginResult(credentials)) {\n      const params: ICredentialsAuthenticated = {\n        resume: credentials.token\n      }\n      return params\n    }\n    const params: ICredentialsPass = {\n      user: { username: credentials.username },\n      password: {\n        digest: sha256(credentials.password),\n        algorithm: 'sha-256'\n      }\n    }\n    return params\n  }\n\n  /** Logout the current User from the server via Socket. */\n  logout = () => {\n    this.resume = null\n    return this.unsubscribeAll()\n\t\t\t.then(() => this.call('logout'))\n  }\n\n  /** Register a callback to trigger on message events in subscription */\n  onEvent = (id: string, callback: ISocketMessageCallback) => {\n    this.on(id, callback)\n  }\n\n  /**\n   * Subscribe to a stream on server via socket and returns a promise resolved\n   * with the subscription object when the subscription is ready.\n   * @param name      Stream name to subscribe to\n   * @param params    Params sent to the subscription request\n   */\n  subscribe = (name: string, params: any[], callback ?: ISocketMessageCallback, id?: string) => {\n    this.logger.info(`[ddp] Subscribe to ${name}, param: ${JSON.stringify(params)}`)\n    return this.send({ msg: 'sub', id, name, params })\n      .then((result) => {\n        const id = (result.subs) ? result.subs[0] : undefined\n        if (id) {\n          const unsubscribe = this.unsubscribe.bind(this, id)\n          const onEvent = this.onEvent.bind(this, name)\n          const subscription = { id, name, params, unsubscribe, onEvent }\n          if (callback) subscription.onEvent(callback)\n          this.subscriptions[id] = subscription\n          return subscription\n        }\n      })\n      .catch((err) => {\n        this.logger.error(`[ddp] Subscribe error: ${err.message}`)\n        // throw err\n      })\n  }\n\n  /** Subscribe to all pre-configured streams (e.g. on login resume) */\n  subscribeAll = () => {\n    const subscriptions = Object.keys(this.subscriptions || {}).map((key) => {\n      const { name, params, id } = this.subscriptions[key]\n      return this.subscribe(name, params, undefined, id)\n    })\n    return Promise.all(subscriptions)\n  }\n\n  /** Unsubscribe to server stream, resolve with unsubscribe request result */\n  unsubscribe = (id: any) => {\n    if (!this.subscriptions[id]) return Promise.reject(id)\n    delete this.subscriptions[id]\n    return this.send({ msg: 'unsub', id })\n      .then((data: any) => data.result || data.subs)\n      .catch((err) => {\n        if (!err.msg && err.msg !== 'nosub') {\n          this.logger.error(`[ddp] Unsubscribe error: ${err.message}`)\n          throw err\n        }\n      })\n  }\n\n  /** Unsubscribe from all active subscriptions and reset collection */\n  unsubscribeAll = () => {\n    const unsubAll = Object.keys(this.subscriptions).map((id) => {\n      return this.subscriptions[id].unsubscribe()\n    })\n    return Promise.all(unsubAll)\n      .then(() => this.subscriptions = {})\n  }\n}\n\nexport class DDPDriver extends EventEmitter implements ISocket, IDriver {\n  logger: ILogger\n  config: ISocketOptions\n\t/**\n\t * Event Emitter for listening to connection (echoes selection of DDP events)\n\t * @example\n\t *  import { driver } from '@rocket.chat/sdk'\n\t *  driver.connect()\n\t *  driver.events.on('connected', () => console.log('driver connected'))\n\t */\n\t// events = new EventEmitter()\n\n\t/**\n\t * An Websocket instance for interacting with Rocket.Chat.\n\t * Variable not initialised until `connect` called.\n\t */\n  ddp: Socket\n\n\t/**\n\t * Websocket subscriptions, exported for direct polling by adapters\n\t * Variable not initialised until `prepMeteorSubscriptions` called.\n\t * @deprecated Use `ddp.Socket` instance subscriptions instead.\n\t */\n  subscriptions: { [id: string]: ISubscription } = {}\n\n\t/** Save messages subscription to ensure only one created */\n  messages: ISubscription | undefined\n\n\t/** Current user object populated from resolved login */\n  userId: string = ''\n\n\t/** Array of joined room IDs (for reactive queries) */\n  joinedIds: string[] = []\n\n  constructor ({ host = 'localhost:3000', integrationId, config, logger = Logger, ...moreConfigs }: any = {}) {\n    super()\n\n    this.config = {\n      ...config,\n      ...moreConfigs,\n      host: host.replace(/(^\\w+:|^)\\/\\//, ''),\n      timeout: 20000\n\t\t\t// reopen: number\n\t\t\t// ping: number\n\t\t\t// close: number\n\t\t\t// integration: string\n    }\n    this.ddp = new Socket({ ...this.config, logger })\n    this.logger = logger\n  }\n\n\t/**\n\t * Initialise socket instance with given options or defaults.\n\t * Proxies the DDP module socket connection. Resolves with socket when open.\n\t * Accepts callback following error-first-pattern.\n\t * Error returned or promise rejected on timeout.\n\t * @example <caption>Using promise</caption>\n\t *  import { driver } from '@rocket.chat/sdk'\n\t *  driver.connect()\n\t *    .then(() => console.log('connected'))\n\t *    .catch((err) => console.error(err))\n\t */\n  connect = (c: any = {}): Promise<any> => {\n    if (this.connected) {\n      return Promise.resolve(this)\n    }\n    const config: ISocketOptions = { ...this.config, ...c } // override defaults\n\n    return new Promise((resolve, reject) => {\n      this.logger.info('[driver] Connecting', config)\n      this.subscriptions = this.ddp.subscriptions\n      this.ddp.open().catch((err: Error) => {\n        this.logger.error(`[driver] Failed to connect: ${err.message}`)\n        reject(err)\n      })\n\n      this.ddp.on('open', () => this.emit('connected')) // echo ddp event\n\n      let cancelled = false\n      const rejectionTimeout = setTimeout(() => {\n        this.logger.info(`[driver] Timeout (${config.timeout})`)\n        const err = new Error('Socket connection timeout')\n        cancelled = true\n        reject(err)\n      }, config.timeout)\n\n\t\t\t// if to avoid condition where timeout happens before listener to 'connected' is added\n\t\t\t// and this listener is not removed (because it was added after the removal)\n      if (!cancelled) {\n        this.once('connected', () => {\n          this.logger.info('[driver] Connected')\n          if (cancelled) return this.ddp.close() // cancel if already rejected\n          clearTimeout(rejectionTimeout)\n          resolve(this as IDriver)\n        })\n      }\n    })\n  }\n\n  get connected (): boolean {\n    return !!this.ddp.connected\n  }\n\n  disconnect = (): Promise<any> => {\n    return this.ddp.close()\n  }\n\n  checkAndReopen = (): Promise<any> => {\n    // @ts-ignore\n    return this.ddp.checkAndReopen()\n  }\n\n  subscribe = (topic: string, eventname: string, ...args: any[]): Promise<ISubscription> => {\n    this.logger.info(`[DDP driver] Subscribing to ${topic} | ${JSON.stringify(args)}`)\n    // @ts-ignore\n    return this.ddp.subscribe(topic, [eventname, { 'useCollection': false, 'args': args }])\n  }\n\n  subscribeNotifyAll = (): Promise< any> => {\n    const topic = 'stream-notify-all'\n    return Promise.all([\n      'roles-change',\n      'updateEmojiCustom',\n      'deleteEmojiCustom',\n      'updateAvatar',\n      'public-settings-changed',\n      'permissions-changed'\n    ].map(event => this.subscribe(topic, event, false)))\n  }\n\n  subscribeLoggedNotify = (): Promise<any> => {\n    const topic = 'stream-notify-logged'\n    return Promise.all([\n      'Users:NameChanged',\n      'Users:Deleted',\n      'updateAvatar',\n      'updateEmojiCustom',\n      'deleteEmojiCustom',\n      'roles-change'\n    ].map(event => this.subscribe(topic, event, false)))\n  }\n\n  subscribeNotifyUser = (): Promise<any> => {\n    const topic = 'stream-notify-user'\n    return Promise.all([\n      'message',\n      'otr',\n      'webrtc',\n      'notification',\n      'rooms-changed',\n      'subscriptions-changed',\n      'uiInteraction',\n      'e2ekeyRequest',\n      'userData'\n    ].map(event => this.subscribe(topic, `${this.userId}/${event}`, false)))\n  }\n\n  subscribeRoom = (rid: string, ...args: any[]): Promise<ISubscription[]> => {\n    const topic = 'stream-notify-room'\n    return Promise.all([\n      this.subscribe('stream-room-messages', rid, ...args),\n      this.subscribe(topic, `${rid}/typing`, ...args),\n      this.subscribe(topic, `${rid}/deleteMessage`, ...args)\n    ])\n  }\n\n\t/** Login to Rocket.Chat via DDP */\n  login = async (credentials: ICredentials, args: any): Promise<any> => {\n    if (!this.ddp || !this.ddp.connected) {\n      await this.connect()\n    }\n    this.logger.info(`[DDP driver] Login with ${JSON.stringify(credentials)}`)\n    const login: ILoginResult = await this.ddp.login(credentials)\n    this.userId = login.id\n    return login\n  }\n  logout = async () => {\n    if (this.ddp && this.ddp.connected) {\n      await this.ddp.logout()\n    }\n\n  }\n\t/** Unsubscribe from Meteor stream. Proxy for socket unsubscribe. */\n  unsubscribe = (subscription: ISubscription) => {\n    return this.ddp.unsubscribe(subscription.id)\n  }\n\n\t/** Unsubscribe from all subscriptions. Proxy for socket unsubscribeAll */\n  unsubscribeAll = (): Promise<any> => {\n    return this.ddp.unsubscribeAll()\n  }\n\n  onStreamData = (event: string, cb: ICallback): Promise<any> => {\n    function listener (message: any) {\n      cb((message))\n    }\n    return Promise.resolve(this.ddp.on(event, listener))\n      .then(() => ({\n        stop: () => this.ddp.off(event, listener)\n      }))\n  }\n\n  onMessage = (cb: ICallback): void => {\n    this.ddp.on('stream-room-messages', ({ fields: { args: [message] } }: any) => cb(this.ejsonMessage(message)))\n  }\n\n  onTyping = (cb: ICallback): Promise<any > => {\n    return this.ddp.on('stream-notify-room', ({ fields: { args: [username, isTyping] } }: any) => {\n      cb(username, isTyping)\n    }) as any\n  }\n\n  notifyVisitorTyping = (rid: string, username: string, typing: boolean, token: string) => {\n    return this.ddp.call('stream-notify-room', `${ rid }/typing`, username, typing, { token })\n  }\n\n  ejsonMessage = (message: any) => {\n    if (message.ts) {\n      message.ts = new Date(message.ts.$date)\n    }\n    return message\n  }\n\n  methodCall = (method: string, ...args: any[]): Promise<any> => {\n    return this.ddp.call(method, ...args)\n  }\n}\n"]}